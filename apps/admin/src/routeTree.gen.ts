/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SupportLazyImport = createFileRoute('/support')()
const StudentsLazyImport = createFileRoute('/students')()
const RegistrationsLazyImport = createFileRoute('/registrations')()
const LoginLazyImport = createFileRoute('/login')()
const CalendarLazyImport = createFileRoute('/calendar')()
const AssignmentsLazyImport = createFileRoute('/assignments')()
const AnnouncementsLazyImport = createFileRoute('/announcements')()
const AdministratorsLazyImport = createFileRoute('/administrators')()
const IndexLazyImport = createFileRoute('/')()
const ClassesIndexLazyImport = createFileRoute('/classes/')()
const ClassesClassCodeIndexLazyImport = createFileRoute(
  '/classes/$classCode/',
)()
const ClassesClassCodeStudentsIndexLazyImport = createFileRoute(
  '/classes/$classCode/students/',
)()
const ClassesClassCodeModulesIndexLazyImport = createFileRoute(
  '/classes/$classCode/modules/',
)()
const ClassesClassCodeAssignmentsIndexLazyImport = createFileRoute(
  '/classes/$classCode/assignments/',
)()
const ClassesClassCodeAnnouncementsIndexLazyImport = createFileRoute(
  '/classes/$classCode/announcements/',
)()
const ClassesClassCodeAssignmentsCreateLazyImport = createFileRoute(
  '/classes/$classCode/assignments/create',
)()
const ClassesClassCodeAnnouncementsCreateLazyImport = createFileRoute(
  '/classes/$classCode/announcements/create',
)()
const ClassesClassCodeAnnouncementsAnnouncementCodeLazyImport = createFileRoute(
  '/classes/$classCode/announcements/$announcementCode',
)()
const ClassesClassCodeModulesModuleCodeIndexLazyImport = createFileRoute(
  '/classes/$classCode/modules/$moduleCode/',
)()
const ClassesClassCodeAssignmentsAssignmentCodeIndexLazyImport =
  createFileRoute('/classes/$classCode/assignments/$assignmentCode/')()
const ClassesClassCodeModulesModuleCodeUpdateLazyImport = createFileRoute(
  '/classes/$classCode/modules/$moduleCode/update',
)()
const ClassesClassCodeModulesModuleCodeLessonsLazyImport = createFileRoute(
  '/classes/$classCode/modules/$moduleCode/lessons',
)()
const ClassesClassCodeAssignmentsAssignmentCodeUpdateLazyImport =
  createFileRoute('/classes/$classCode/assignments/$assignmentCode/update')()
const ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyImport =
  createFileRoute(
    '/classes/$classCode/assignments/$assignmentCode/submissions',
  )()
const ClassesClassCodeAnnouncementsAnnouncementCodeUpdateLazyImport =
  createFileRoute(
    '/classes/$classCode/announcements/$announcementCode/update',
  )()
const ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyImport =
  createFileRoute(
    '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode',
  )()
const ClassesClassCodeAssignmentsAssignmentCodeSubmissionsSubmissionCodeLazyImport =
  createFileRoute(
    '/classes/$classCode/assignments/$assignmentCode/submissions/$submissionCode',
  )()
const ClassesClassCodeModulesModuleCodeLessonsLessonCodeUpdateLazyImport =
  createFileRoute(
    '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/update',
  )()
const ClassesClassCodeModulesModuleCodeLessonsLessonCodeCreateLazyImport =
  createFileRoute(
    '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/create',
  )()

// Create/Update Routes

const SupportLazyRoute = SupportLazyImport.update({
  path: '/support',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/support.lazy').then((d) => d.Route))

const StudentsLazyRoute = StudentsLazyImport.update({
  path: '/students',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/students.lazy').then((d) => d.Route))

const RegistrationsLazyRoute = RegistrationsLazyImport.update({
  path: '/registrations',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/registrations.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const CalendarLazyRoute = CalendarLazyImport.update({
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/calendar.lazy').then((d) => d.Route))

const AssignmentsLazyRoute = AssignmentsLazyImport.update({
  path: '/assignments',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/assignments.lazy').then((d) => d.Route))

const AnnouncementsLazyRoute = AnnouncementsLazyImport.update({
  path: '/announcements',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/announcements.lazy').then((d) => d.Route))

const AdministratorsLazyRoute = AdministratorsLazyImport.update({
  path: '/administrators',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/administrators.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ClassesIndexLazyRoute = ClassesIndexLazyImport.update({
  path: '/classes/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/classes/index.lazy').then((d) => d.Route))

const ClassesClassCodeIndexLazyRoute = ClassesClassCodeIndexLazyImport.update({
  path: '/classes/$classCode/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/classes/$classCode/index.lazy').then((d) => d.Route),
)

const ClassesClassCodeStudentsIndexLazyRoute =
  ClassesClassCodeStudentsIndexLazyImport.update({
    path: '/classes/$classCode/students/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/students/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeModulesIndexLazyRoute =
  ClassesClassCodeModulesIndexLazyImport.update({
    path: '/classes/$classCode/modules/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/modules/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAssignmentsIndexLazyRoute =
  ClassesClassCodeAssignmentsIndexLazyImport.update({
    path: '/classes/$classCode/assignments/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/assignments/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAnnouncementsIndexLazyRoute =
  ClassesClassCodeAnnouncementsIndexLazyImport.update({
    path: '/classes/$classCode/announcements/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/announcements/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAssignmentsCreateLazyRoute =
  ClassesClassCodeAssignmentsCreateLazyImport.update({
    path: '/classes/$classCode/assignments/create',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/assignments/create.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAnnouncementsCreateLazyRoute =
  ClassesClassCodeAnnouncementsCreateLazyImport.update({
    path: '/classes/$classCode/announcements/create',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/announcements/create.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAnnouncementsAnnouncementCodeLazyRoute =
  ClassesClassCodeAnnouncementsAnnouncementCodeLazyImport.update({
    path: '/classes/$classCode/announcements/$announcementCode',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/announcements/$announcementCode.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeModulesModuleCodeIndexLazyRoute =
  ClassesClassCodeModulesModuleCodeIndexLazyImport.update({
    path: '/classes/$classCode/modules/$moduleCode/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/modules/$moduleCode/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAssignmentsAssignmentCodeIndexLazyRoute =
  ClassesClassCodeAssignmentsAssignmentCodeIndexLazyImport.update({
    path: '/classes/$classCode/assignments/$assignmentCode/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/assignments/$assignmentCode/index.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeModulesModuleCodeUpdateLazyRoute =
  ClassesClassCodeModulesModuleCodeUpdateLazyImport.update({
    path: '/classes/$classCode/modules/$moduleCode/update',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/modules/$moduleCode/update.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeModulesModuleCodeLessonsLazyRoute =
  ClassesClassCodeModulesModuleCodeLessonsLazyImport.update({
    path: '/classes/$classCode/modules/$moduleCode/lessons',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/modules/$moduleCode/lessons.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAssignmentsAssignmentCodeUpdateLazyRoute =
  ClassesClassCodeAssignmentsAssignmentCodeUpdateLazyImport.update({
    path: '/classes/$classCode/assignments/$assignmentCode/update',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/assignments/$assignmentCode/update.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyRoute =
  ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyImport.update({
    path: '/classes/$classCode/assignments/$assignmentCode/submissions',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/assignments/$assignmentCode/submissions.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeAnnouncementsAnnouncementCodeUpdateLazyRoute =
  ClassesClassCodeAnnouncementsAnnouncementCodeUpdateLazyImport.update({
    path: '/update',
    getParentRoute: () =>
      ClassesClassCodeAnnouncementsAnnouncementCodeLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/announcements/$announcementCode.update.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyRoute =
  ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyImport.update({
    path: '/$lessonCode',
    getParentRoute: () => ClassesClassCodeModulesModuleCodeLessonsLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/modules/$moduleCode/lessons.$lessonCode.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeAssignmentsAssignmentCodeSubmissionsSubmissionCodeLazyRoute =
  ClassesClassCodeAssignmentsAssignmentCodeSubmissionsSubmissionCodeLazyImport.update(
    {
      path: '/$submissionCode',
      getParentRoute: () =>
        ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/classes/$classCode/assignments/$assignmentCode/submissions.$submissionCode.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeModulesModuleCodeLessonsLessonCodeUpdateLazyRoute =
  ClassesClassCodeModulesModuleCodeLessonsLessonCodeUpdateLazyImport.update({
    path: '/update',
    getParentRoute: () =>
      ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/modules/$moduleCode/lessons.$lessonCode.update.lazy'
    ).then((d) => d.Route),
  )

const ClassesClassCodeModulesModuleCodeLessonsLessonCodeCreateLazyRoute =
  ClassesClassCodeModulesModuleCodeLessonsLessonCodeCreateLazyImport.update({
    path: '/create',
    getParentRoute: () =>
      ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/modules/$moduleCode/lessons.$lessonCode.create.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/administrators': {
      id: '/administrators'
      path: '/administrators'
      fullPath: '/administrators'
      preLoaderRoute: typeof AdministratorsLazyImport
      parentRoute: typeof rootRoute
    }
    '/announcements': {
      id: '/announcements'
      path: '/announcements'
      fullPath: '/announcements'
      preLoaderRoute: typeof AnnouncementsLazyImport
      parentRoute: typeof rootRoute
    }
    '/assignments': {
      id: '/assignments'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AssignmentsLazyImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/registrations': {
      id: '/registrations'
      path: '/registrations'
      fullPath: '/registrations'
      preLoaderRoute: typeof RegistrationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/students': {
      id: '/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof StudentsLazyImport
      parentRoute: typeof rootRoute
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/': {
      id: '/classes/'
      path: '/classes'
      fullPath: '/classes'
      preLoaderRoute: typeof ClassesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/': {
      id: '/classes/$classCode/'
      path: '/classes/$classCode'
      fullPath: '/classes/$classCode'
      preLoaderRoute: typeof ClassesClassCodeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/announcements/$announcementCode': {
      id: '/classes/$classCode/announcements/$announcementCode'
      path: '/classes/$classCode/announcements/$announcementCode'
      fullPath: '/classes/$classCode/announcements/$announcementCode'
      preLoaderRoute: typeof ClassesClassCodeAnnouncementsAnnouncementCodeLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/announcements/create': {
      id: '/classes/$classCode/announcements/create'
      path: '/classes/$classCode/announcements/create'
      fullPath: '/classes/$classCode/announcements/create'
      preLoaderRoute: typeof ClassesClassCodeAnnouncementsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/assignments/create': {
      id: '/classes/$classCode/assignments/create'
      path: '/classes/$classCode/assignments/create'
      fullPath: '/classes/$classCode/assignments/create'
      preLoaderRoute: typeof ClassesClassCodeAssignmentsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/announcements/': {
      id: '/classes/$classCode/announcements/'
      path: '/classes/$classCode/announcements'
      fullPath: '/classes/$classCode/announcements'
      preLoaderRoute: typeof ClassesClassCodeAnnouncementsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/assignments/': {
      id: '/classes/$classCode/assignments/'
      path: '/classes/$classCode/assignments'
      fullPath: '/classes/$classCode/assignments'
      preLoaderRoute: typeof ClassesClassCodeAssignmentsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/modules/': {
      id: '/classes/$classCode/modules/'
      path: '/classes/$classCode/modules'
      fullPath: '/classes/$classCode/modules'
      preLoaderRoute: typeof ClassesClassCodeModulesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/students/': {
      id: '/classes/$classCode/students/'
      path: '/classes/$classCode/students'
      fullPath: '/classes/$classCode/students'
      preLoaderRoute: typeof ClassesClassCodeStudentsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/announcements/$announcementCode/update': {
      id: '/classes/$classCode/announcements/$announcementCode/update'
      path: '/update'
      fullPath: '/classes/$classCode/announcements/$announcementCode/update'
      preLoaderRoute: typeof ClassesClassCodeAnnouncementsAnnouncementCodeUpdateLazyImport
      parentRoute: typeof ClassesClassCodeAnnouncementsAnnouncementCodeLazyImport
    }
    '/classes/$classCode/assignments/$assignmentCode/submissions': {
      id: '/classes/$classCode/assignments/$assignmentCode/submissions'
      path: '/classes/$classCode/assignments/$assignmentCode/submissions'
      fullPath: '/classes/$classCode/assignments/$assignmentCode/submissions'
      preLoaderRoute: typeof ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/assignments/$assignmentCode/update': {
      id: '/classes/$classCode/assignments/$assignmentCode/update'
      path: '/classes/$classCode/assignments/$assignmentCode/update'
      fullPath: '/classes/$classCode/assignments/$assignmentCode/update'
      preLoaderRoute: typeof ClassesClassCodeAssignmentsAssignmentCodeUpdateLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/modules/$moduleCode/lessons': {
      id: '/classes/$classCode/modules/$moduleCode/lessons'
      path: '/classes/$classCode/modules/$moduleCode/lessons'
      fullPath: '/classes/$classCode/modules/$moduleCode/lessons'
      preLoaderRoute: typeof ClassesClassCodeModulesModuleCodeLessonsLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/modules/$moduleCode/update': {
      id: '/classes/$classCode/modules/$moduleCode/update'
      path: '/classes/$classCode/modules/$moduleCode/update'
      fullPath: '/classes/$classCode/modules/$moduleCode/update'
      preLoaderRoute: typeof ClassesClassCodeModulesModuleCodeUpdateLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/assignments/$assignmentCode/': {
      id: '/classes/$classCode/assignments/$assignmentCode/'
      path: '/classes/$classCode/assignments/$assignmentCode'
      fullPath: '/classes/$classCode/assignments/$assignmentCode'
      preLoaderRoute: typeof ClassesClassCodeAssignmentsAssignmentCodeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/modules/$moduleCode/': {
      id: '/classes/$classCode/modules/$moduleCode/'
      path: '/classes/$classCode/modules/$moduleCode'
      fullPath: '/classes/$classCode/modules/$moduleCode'
      preLoaderRoute: typeof ClassesClassCodeModulesModuleCodeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classCode/assignments/$assignmentCode/submissions/$submissionCode': {
      id: '/classes/$classCode/assignments/$assignmentCode/submissions/$submissionCode'
      path: '/$submissionCode'
      fullPath: '/classes/$classCode/assignments/$assignmentCode/submissions/$submissionCode'
      preLoaderRoute: typeof ClassesClassCodeAssignmentsAssignmentCodeSubmissionsSubmissionCodeLazyImport
      parentRoute: typeof ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyImport
    }
    '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode': {
      id: '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode'
      path: '/$lessonCode'
      fullPath: '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode'
      preLoaderRoute: typeof ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyImport
      parentRoute: typeof ClassesClassCodeModulesModuleCodeLessonsLazyImport
    }
    '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/create': {
      id: '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/create'
      path: '/create'
      fullPath: '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/create'
      preLoaderRoute: typeof ClassesClassCodeModulesModuleCodeLessonsLessonCodeCreateLazyImport
      parentRoute: typeof ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyImport
    }
    '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/update': {
      id: '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/update'
      path: '/update'
      fullPath: '/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/update'
      preLoaderRoute: typeof ClassesClassCodeModulesModuleCodeLessonsLessonCodeUpdateLazyImport
      parentRoute: typeof ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AdministratorsLazyRoute,
  AnnouncementsLazyRoute,
  AssignmentsLazyRoute,
  CalendarLazyRoute,
  LoginLazyRoute,
  RegistrationsLazyRoute,
  StudentsLazyRoute,
  SupportLazyRoute,
  ClassesIndexLazyRoute,
  ClassesClassCodeIndexLazyRoute,
  ClassesClassCodeAnnouncementsAnnouncementCodeLazyRoute:
    ClassesClassCodeAnnouncementsAnnouncementCodeLazyRoute.addChildren({
      ClassesClassCodeAnnouncementsAnnouncementCodeUpdateLazyRoute,
    }),
  ClassesClassCodeAnnouncementsCreateLazyRoute,
  ClassesClassCodeAssignmentsCreateLazyRoute,
  ClassesClassCodeAnnouncementsIndexLazyRoute,
  ClassesClassCodeAssignmentsIndexLazyRoute,
  ClassesClassCodeModulesIndexLazyRoute,
  ClassesClassCodeStudentsIndexLazyRoute,
  ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyRoute:
    ClassesClassCodeAssignmentsAssignmentCodeSubmissionsLazyRoute.addChildren({
      ClassesClassCodeAssignmentsAssignmentCodeSubmissionsSubmissionCodeLazyRoute,
    }),
  ClassesClassCodeAssignmentsAssignmentCodeUpdateLazyRoute,
  ClassesClassCodeModulesModuleCodeLessonsLazyRoute:
    ClassesClassCodeModulesModuleCodeLessonsLazyRoute.addChildren({
      ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyRoute:
        ClassesClassCodeModulesModuleCodeLessonsLessonCodeLazyRoute.addChildren(
          {
            ClassesClassCodeModulesModuleCodeLessonsLessonCodeCreateLazyRoute,
            ClassesClassCodeModulesModuleCodeLessonsLessonCodeUpdateLazyRoute,
          },
        ),
    }),
  ClassesClassCodeModulesModuleCodeUpdateLazyRoute,
  ClassesClassCodeAssignmentsAssignmentCodeIndexLazyRoute,
  ClassesClassCodeModulesModuleCodeIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/administrators",
        "/announcements",
        "/assignments",
        "/calendar",
        "/login",
        "/registrations",
        "/students",
        "/support",
        "/classes/",
        "/classes/$classCode/",
        "/classes/$classCode/announcements/$announcementCode",
        "/classes/$classCode/announcements/create",
        "/classes/$classCode/assignments/create",
        "/classes/$classCode/announcements/",
        "/classes/$classCode/assignments/",
        "/classes/$classCode/modules/",
        "/classes/$classCode/students/",
        "/classes/$classCode/assignments/$assignmentCode/submissions",
        "/classes/$classCode/assignments/$assignmentCode/update",
        "/classes/$classCode/modules/$moduleCode/lessons",
        "/classes/$classCode/modules/$moduleCode/update",
        "/classes/$classCode/assignments/$assignmentCode/",
        "/classes/$classCode/modules/$moduleCode/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/administrators": {
      "filePath": "administrators.lazy.tsx"
    },
    "/announcements": {
      "filePath": "announcements.lazy.tsx"
    },
    "/assignments": {
      "filePath": "assignments.lazy.tsx"
    },
    "/calendar": {
      "filePath": "calendar.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/registrations": {
      "filePath": "registrations.lazy.tsx"
    },
    "/students": {
      "filePath": "students.lazy.tsx"
    },
    "/support": {
      "filePath": "support.lazy.tsx"
    },
    "/classes/": {
      "filePath": "classes/index.lazy.tsx"
    },
    "/classes/$classCode/": {
      "filePath": "classes/$classCode/index.lazy.tsx"
    },
    "/classes/$classCode/announcements/$announcementCode": {
      "filePath": "classes/$classCode/announcements/$announcementCode.lazy.tsx",
      "children": [
        "/classes/$classCode/announcements/$announcementCode/update"
      ]
    },
    "/classes/$classCode/announcements/create": {
      "filePath": "classes/$classCode/announcements/create.lazy.tsx"
    },
    "/classes/$classCode/assignments/create": {
      "filePath": "classes/$classCode/assignments/create.lazy.tsx"
    },
    "/classes/$classCode/announcements/": {
      "filePath": "classes/$classCode/announcements/index.lazy.tsx"
    },
    "/classes/$classCode/assignments/": {
      "filePath": "classes/$classCode/assignments/index.lazy.tsx"
    },
    "/classes/$classCode/modules/": {
      "filePath": "classes/$classCode/modules/index.lazy.tsx"
    },
    "/classes/$classCode/students/": {
      "filePath": "classes/$classCode/students/index.lazy.tsx"
    },
    "/classes/$classCode/announcements/$announcementCode/update": {
      "filePath": "classes/$classCode/announcements/$announcementCode.update.lazy.tsx",
      "parent": "/classes/$classCode/announcements/$announcementCode"
    },
    "/classes/$classCode/assignments/$assignmentCode/submissions": {
      "filePath": "classes/$classCode/assignments/$assignmentCode/submissions.lazy.tsx",
      "children": [
        "/classes/$classCode/assignments/$assignmentCode/submissions/$submissionCode"
      ]
    },
    "/classes/$classCode/assignments/$assignmentCode/update": {
      "filePath": "classes/$classCode/assignments/$assignmentCode/update.lazy.tsx"
    },
    "/classes/$classCode/modules/$moduleCode/lessons": {
      "filePath": "classes/$classCode/modules/$moduleCode/lessons.lazy.tsx",
      "children": [
        "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode"
      ]
    },
    "/classes/$classCode/modules/$moduleCode/update": {
      "filePath": "classes/$classCode/modules/$moduleCode/update.lazy.tsx"
    },
    "/classes/$classCode/assignments/$assignmentCode/": {
      "filePath": "classes/$classCode/assignments/$assignmentCode/index.lazy.tsx"
    },
    "/classes/$classCode/modules/$moduleCode/": {
      "filePath": "classes/$classCode/modules/$moduleCode/index.lazy.tsx"
    },
    "/classes/$classCode/assignments/$assignmentCode/submissions/$submissionCode": {
      "filePath": "classes/$classCode/assignments/$assignmentCode/submissions.$submissionCode.lazy.tsx",
      "parent": "/classes/$classCode/assignments/$assignmentCode/submissions"
    },
    "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode": {
      "filePath": "classes/$classCode/modules/$moduleCode/lessons.$lessonCode.lazy.tsx",
      "parent": "/classes/$classCode/modules/$moduleCode/lessons",
      "children": [
        "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/create",
        "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/update"
      ]
    },
    "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/create": {
      "filePath": "classes/$classCode/modules/$moduleCode/lessons.$lessonCode.create.lazy.tsx",
      "parent": "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode"
    },
    "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode/update": {
      "filePath": "classes/$classCode/modules/$moduleCode/lessons.$lessonCode.update.lazy.tsx",
      "parent": "/classes/$classCode/modules/$moduleCode/lessons/$lessonCode"
    }
  }
}
ROUTE_MANIFEST_END */
