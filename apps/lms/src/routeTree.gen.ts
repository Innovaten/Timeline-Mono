/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'

// Create Virtual Routes

const SupportLazyImport = createFileRoute('/support')()
const RegisterLazyImport = createFileRoute('/register')()
const ClassesLazyImport = createFileRoute('/classes')()
const AssignmentsLazyImport = createFileRoute('/assignments')()
const AnnouncementsLazyImport = createFileRoute('/announcements')()
const IndexLazyImport = createFileRoute('/')()
const ClassesclassCodeLazyImport = createFileRoute('/classes/${classCode}')()
const AnnouncementsAnnouncementCodeLazyImport = createFileRoute(
  '/announcements/$announcementCode',
)()
const ClassesClassCodeIndexLazyImport = createFileRoute(
  '/classes/$classCode/',
)()
const RegisterAcceptIdLazyImport = createFileRoute('/register/accept/$id')()
const ClassesclassCodeLessonsLazyImport = createFileRoute(
  '/classes/${classCode}/lessons',
)()
const ClassesClassCodeAnnouncementsIndexLazyImport = createFileRoute(
  '/classes/$classCode/announcements/',
)()
const ClassesClassCodeAnnouncementsAnnouncementCodeLazyImport = createFileRoute(
  '/classes/$classCode/announcements/$announcementCode',
)()

// Create/Update Routes

const SupportLazyRoute = SupportLazyImport.update({
  path: '/support',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/support.lazy').then((d) => d.Route))

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const ClassesLazyRoute = ClassesLazyImport.update({
  path: '/classes',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/classes.lazy').then((d) => d.Route))

const AssignmentsLazyRoute = AssignmentsLazyImport.update({
  path: '/assignments',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/assignments.lazy').then((d) => d.Route))

const AnnouncementsLazyRoute = AnnouncementsLazyImport.update({
  path: '/announcements',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/announcements.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ClassesclassCodeLazyRoute = ClassesclassCodeLazyImport.update({
  path: '/${classCode}',
  getParentRoute: () => ClassesLazyRoute,
} as any).lazy(() =>
  import('./routes/classes.${classCode}.lazy').then((d) => d.Route),
)

const AnnouncementsAnnouncementCodeLazyRoute =
  AnnouncementsAnnouncementCodeLazyImport.update({
    path: '/$announcementCode',
    getParentRoute: () => AnnouncementsLazyRoute,
  } as any).lazy(() =>
    import('./routes/announcements.$announcementCode.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeIndexLazyRoute = ClassesClassCodeIndexLazyImport.update({
  path: '/$classCode/',
  getParentRoute: () => ClassesLazyRoute,
} as any).lazy(() =>
  import('./routes/classes/$classCode/index.lazy').then((d) => d.Route),
)

const RegisterAcceptIdLazyRoute = RegisterAcceptIdLazyImport.update({
  path: '/accept/$id',
  getParentRoute: () => RegisterLazyRoute,
} as any).lazy(() =>
  import('./routes/register.accept.$id.lazy').then((d) => d.Route),
)

const ClassesclassCodeLessonsLazyRoute =
  ClassesclassCodeLessonsLazyImport.update({
    path: '/lessons',
    getParentRoute: () => ClassesclassCodeLazyRoute,
  } as any).lazy(() =>
    import('./routes/classes.${classCode}.lessons.lazy').then((d) => d.Route),
  )

const ClassesClassCodeAnnouncementsIndexLazyRoute =
  ClassesClassCodeAnnouncementsIndexLazyImport.update({
    path: '/$classCode/announcements/',
    getParentRoute: () => ClassesLazyRoute,
  } as any).lazy(() =>
    import('./routes/classes/$classCode/announcements/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ClassesClassCodeAnnouncementsAnnouncementCodeLazyRoute =
  ClassesClassCodeAnnouncementsAnnouncementCodeLazyImport.update({
    path: '/$classCode/announcements/$announcementCode',
    getParentRoute: () => ClassesLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/classes/$classCode/announcements/$announcementCode.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/announcements': {
      id: '/announcements'
      path: '/announcements'
      fullPath: '/announcements'
      preLoaderRoute: typeof AnnouncementsLazyImport
      parentRoute: typeof rootRoute
    }
    '/assignments': {
      id: '/assignments'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AssignmentsLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes': {
      id: '/classes'
      path: '/classes'
      fullPath: '/classes'
      preLoaderRoute: typeof ClassesLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportLazyImport
      parentRoute: typeof rootRoute
    }
    '/announcements/$announcementCode': {
      id: '/announcements/$announcementCode'
      path: '/$announcementCode'
      fullPath: '/announcements/$announcementCode'
      preLoaderRoute: typeof AnnouncementsAnnouncementCodeLazyImport
      parentRoute: typeof AnnouncementsLazyImport
    }
    '/classes/${classCode}': {
      id: '/classes/${classCode}'
      path: '/${classCode}'
      fullPath: '/classes/${classCode}'
      preLoaderRoute: typeof ClassesclassCodeLazyImport
      parentRoute: typeof ClassesLazyImport
    }
    '/classes/${classCode}/lessons': {
      id: '/classes/${classCode}/lessons'
      path: '/lessons'
      fullPath: '/classes/${classCode}/lessons'
      preLoaderRoute: typeof ClassesclassCodeLessonsLazyImport
      parentRoute: typeof ClassesclassCodeLazyImport
    }
    '/register/accept/$id': {
      id: '/register/accept/$id'
      path: '/accept/$id'
      fullPath: '/register/accept/$id'
      preLoaderRoute: typeof RegisterAcceptIdLazyImport
      parentRoute: typeof RegisterLazyImport
    }
    '/classes/$classCode/': {
      id: '/classes/$classCode/'
      path: '/$classCode'
      fullPath: '/classes/$classCode'
      preLoaderRoute: typeof ClassesClassCodeIndexLazyImport
      parentRoute: typeof ClassesLazyImport
    }
    '/classes/$classCode/announcements/$announcementCode': {
      id: '/classes/$classCode/announcements/$announcementCode'
      path: '/$classCode/announcements/$announcementCode'
      fullPath: '/classes/$classCode/announcements/$announcementCode'
      preLoaderRoute: typeof ClassesClassCodeAnnouncementsAnnouncementCodeLazyImport
      parentRoute: typeof ClassesLazyImport
    }
    '/classes/$classCode/announcements/': {
      id: '/classes/$classCode/announcements/'
      path: '/$classCode/announcements'
      fullPath: '/classes/$classCode/announcements'
      preLoaderRoute: typeof ClassesClassCodeAnnouncementsIndexLazyImport
      parentRoute: typeof ClassesLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  LoginRoute,
  AnnouncementsLazyRoute: AnnouncementsLazyRoute.addChildren({
    AnnouncementsAnnouncementCodeLazyRoute,
  }),
  AssignmentsLazyRoute,
  ClassesLazyRoute: ClassesLazyRoute.addChildren({
    ClassesclassCodeLazyRoute: ClassesclassCodeLazyRoute.addChildren({
      ClassesclassCodeLessonsLazyRoute,
    }),
    ClassesClassCodeIndexLazyRoute,
    ClassesClassCodeAnnouncementsAnnouncementCodeLazyRoute,
    ClassesClassCodeAnnouncementsIndexLazyRoute,
  }),
  RegisterLazyRoute: RegisterLazyRoute.addChildren({
    RegisterAcceptIdLazyRoute,
  }),
  SupportLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/announcements",
        "/assignments",
        "/classes",
        "/register",
        "/support"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/announcements": {
      "filePath": "announcements.lazy.tsx",
      "children": [
        "/announcements/$announcementCode"
      ]
    },
    "/assignments": {
      "filePath": "assignments.lazy.tsx"
    },
    "/classes": {
      "filePath": "classes.lazy.tsx",
      "children": [
        "/classes/${classCode}",
        "/classes/$classCode/",
        "/classes/$classCode/announcements/$announcementCode",
        "/classes/$classCode/announcements/"
      ]
    },
    "/register": {
      "filePath": "register.lazy.tsx",
      "children": [
        "/register/accept/$id"
      ]
    },
    "/support": {
      "filePath": "support.lazy.tsx"
    },
    "/announcements/$announcementCode": {
      "filePath": "announcements.$announcementCode.lazy.tsx",
      "parent": "/announcements"
    },
    "/classes/${classCode}": {
      "filePath": "classes.${classCode}.lazy.tsx",
      "parent": "/classes",
      "children": [
        "/classes/${classCode}/lessons"
      ]
    },
    "/classes/${classCode}/lessons": {
      "filePath": "classes.${classCode}.lessons.lazy.tsx",
      "parent": "/classes/${classCode}"
    },
    "/register/accept/$id": {
      "filePath": "register.accept.$id.lazy.tsx",
      "parent": "/register"
    },
    "/classes/$classCode/": {
      "filePath": "classes/$classCode/index.lazy.tsx",
      "parent": "/classes"
    },
    "/classes/$classCode/announcements/$announcementCode": {
      "filePath": "classes/$classCode/announcements/$announcementCode.lazy.tsx",
      "parent": "/classes"
    },
    "/classes/$classCode/announcements/": {
      "filePath": "classes/$classCode/announcements/index.lazy.tsx",
      "parent": "/classes"
    }
  }
}
ROUTE_MANIFEST_END */
